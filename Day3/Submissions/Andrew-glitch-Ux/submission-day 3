# Day 3 Submission

## Personal Information
- **Name:** [Andrew Muntet]
- **Date:** [31-05-2025]
- **GitHub Username:** [Andrew-glitch-Ux]

## Task Completion
- [x] Read Chapter 2 of "Terraform: Up & Running"
- [x] Completed Required Hands-on Labs
- [x] Deployed Single Server
- [x] Deployed Web Server
- [x] Created Infrastructure Diagrams

## Infrastructure Details

### Single Server Deployment
- **Region:** [euro-north-1]
- **Instance Type:** [t3.micro]
- **Key Features:** [Deployed in Public Subnet A of a custom VPC (TF-VPC)
Associated with a Security Group allowing inbound access on ports 80 (HTTP), 443 (HTTPS), and 22 (SSH)
Connected to the internet via the VPC’s Internet Gateway
Uses an existing Key Pair for SSH access
Can send traffic to private subnets via NAT Gateway if needed]

### Web Server Deployment
- **Region:** [euro-north-1]
- **Instance Type:** [t3.micro]
- **Key Features:** [Hosted on a single EC2 instance running in Public Subnet A
Protected by a web_server_inbound Security Group
Configured to accept traffic from internet clients on standard web ports
Routes internet-bound traffic via an Internet Gateway
Provides outbound access for private subnet instances via NAT Gateway
Connected infrastructure includes:
Private Subnets for isolated future services (e.g., backend apps, DBs)
S3 Bucket outside the VPC for storage use (created via Terraform)
]

## Infrastructure Diagrams
Please place your infrastructure diagrams in the `architecture` folder with the following files:
- `single-server.png` - Diagram for the single server deployment
- `web-server.png` - Diagram for the web server deployment

## Blog Post
- **Title:** [Your Blog Post Title]
- **Link:** [URL to your blog post]

## Social Media
- **Platform:** [Twitter/LinkedIn]
- **Post Link:** [URL to your social media post]

## Notes and Observations
[Understood how Terraform interacts with cloud providers using the provider block
Learned that each resource block maps to a real cloud resource (like aws_instance, aws_vpc, aws_security_group)
Saw how provisioning is repeatable and version-controlled compared to manual AWS Console use
Understood the need for a key pair for EC2 access and how to reference it securely
Gained confidence using Terraform with VS Code + Git Bash on Window
Referenced Terraform docs and the book’s examples to fix region and resource block issues
Used terraform plan regularly to catch syntax/config errors before applying
Validated everything in the AWS Console after applying Terraform to ensure accuracy
Used terraform destroy to clean up and retry deployments quickly]

## Additional Resources Used
[List any additional resources you found helpful]

## Time Spent
- Reading: [1 hours]
- Infrastructure Deployment: [1/2 hours]
- Diagram Creation: [1 hours]
- Blog Writing: [1/2 hours]
- Total: [2 hours]

## Repository Structure
```
Day3/
└── Submissions/
    └── [Andrew-glitch-Ux]/
        ├── terraform/
        │   ├── aws
                  licence 
                  terraform provider
        │   └── random 
                  licence.txt
                  terraform provider
        ├── Architecture/
               single web server.png
               web server.png
            terraform.lock.hcl
            main.tf
            submission-day 3
            terraform.tfsatte
            terraform.tfvars
            variables.tf
        README.md
        submission_template
    README.md
    tasks.md
``` 



