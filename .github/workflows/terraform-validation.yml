name: Terraform Validation

on:
  pull_request:
    branches:
      - 'week*'
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
    types: [opened, synchronize, reopened]

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Initialize Results
        run: |
          echo "FILE_STRUCTURE_RESULTS=" >> $GITHUB_ENV
          echo "SECURITY_RESULTS=" >> $GITHUB_ENV
          echo "FORMAT_RESULTS=" >> $GITHUB_ENV
          echo "VALIDATION_RESULTS=" >> $GITHUB_ENV
          echo "HAS_ISSUES=false" >> $GITHUB_ENV

      - name: Check File Structure and Required Files
        run: |
          for dir in Day*/; do
            if [ -d "$dir" ]; then
              echo "Checking $dir..."
              required_files=("main.tf" "variables.tf" "outputs.tf" "README.md")
              for file in "${required_files[@]}"; do
                if [ ! -f "$dir/$file" ]; then
                  echo "❌ Missing required file: $dir/$file"
                  echo "HAS_ISSUES=true" >> $GITHUB_ENV
                  exit 1
                fi
              done
              echo "✅ File structure check passed for $dir"
            fi
          done

      - name: Terraform Format Check
        run: |
          for dir in Day*/; do
            if [ -d "$dir" ]; then
              echo "Checking format in $dir..."
              cd "$dir"
              terraform fmt -check -recursive
              if [ $? -ne 0 ]; then
                echo "❌ Terraform format check failed in $dir"
                echo "Please run 'terraform fmt' to fix formatting"
                echo "HAS_ISSUES=true" >> $GITHUB_ENV
                exit 1
              fi
              cd ..
            fi
          done

      - name: Initialize and Validate Terraform
        run: |
          for dir in Day*/; do
            if [ -d "$dir" ]; then
              echo "Validating $dir..."
              cd "$dir"
              terraform init -backend=false
              terraform validate
              if [ $? -ne 0 ]; then
                echo "❌ Terraform validation failed in $dir"
                echo "HAS_ISSUES=true" >> $GITHUB_ENV
                exit 1
              fi
              cd ..
              echo "✅ Terraform validation passed for $dir"
            fi
          done

      - name: Security Checks
        run: |
          for dir in Day*/; do
            if [ -d "$dir" ]; then
              echo "Running security checks in $dir..."
              cd "$dir"
              
              # Check for hardcoded credentials
              if grep -r "access_key\|secret_key\|password\|token" *.tf; then
                echo "❌ Found potential hardcoded credentials in $dir"
                echo "HAS_ISSUES=true" >> $GITHUB_ENV
                exit 1
              fi
              
              # Check for public access in security groups
              if grep -r "0.0.0.0/0" *.tf; then
                echo "⚠️ Warning: Found potential unrestricted access (0.0.0.0/0) in $dir"
                echo "Please ensure this is intentional and documented"
              fi
              
              # Check for required tags
              if ! grep -r "tags\s*=" *.tf; then
                echo "❌ Missing resource tags in $dir"
                echo "HAS_ISSUES=true" >> $GITHUB_ENV
                exit 1
              fi
              
              cd ..
              echo "✅ Security checks passed for $dir"
            fi
          done

      - name: Comment PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Terraform Validation Results

            #### ✅ File Structure
            All required files are present.

            #### ✅ Format Check
            Terraform code is properly formatted.

            #### ✅ Validation Check
            Configuration is valid.

            #### ✅ Security Check
            No hardcoded credentials or major security issues found.

            Please ensure:
            - Proper tagging
            - No public access unless intentional
            - No hardcoded secrets

            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Check for Issues
        if: always()
        run: |
          if [ "$HAS_ISSUES" = "true" ]; then
            echo "Validation checks failed. Please fix the issues before merging."
            exit 1
